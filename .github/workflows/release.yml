name: Auto Release

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

permissions:
  contents: write

env:
  TEST_SHELL: bash  # Change to 'zsh' or another shell if you want

jobs:
  build-and-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Add ~/.local/bin to PATH for this job
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
        
      - name: Install test shell if needed
        if: env.TEST_SHELL == 'zsh'
        run: |
          sudo apt-get update
          sudo apt-get install -y zsh

      - name: Build binaries
        run: |
          export CGO_ENABLED=0
          mkdir -p dist
          echo "Building for linux/amd64"
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/uve-linux-amd64
          echo "Building for darwin/amd64"
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/uve-darwin-amd64
          echo "Building for darwin/arm64"
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/uve-darwin-arm64
          echo "Building for windows/amd64"
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/uve-windows-amd64.exe

      - name: Package release assets
        run: |
          tar czf dist/uve-linux-amd64.tar.gz -C dist uve-linux-amd64
          tar czf dist/uve-darwin-amd64.tar.gz -C dist uve-darwin-amd64
          tar czf dist/uve-darwin-arm64.tar.gz -C dist uve-darwin-arm64
          zip dist/uve-windows-amd64.zip dist/uve-windows-amd64.exe
          rm dist/uve-linux-amd64 dist/uve-darwin-amd64 dist/uve-darwin-arm64 dist/uve-windows-amd64.exe

      - name: Copy install script
        run: |
          cp uve-install.sh dist/uve-install.sh
          chmod +x dist/uve-install.sh

      - name: Validate install in ${{ env.TEST_SHELL }}
        run: |
          export HOME="$(mktemp -d)"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          ${{ env.TEST_SHELL }} dist/uve-install.sh
          echo "Script is complete. Moving to validation of uve"
          uve version
  release:
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION: ${{ steps.version.outputs.NEW_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add ~/.local/bin to PATH for this job
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH          

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Determine next version
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          VERSION_PARTS=(${LAST_TAG//./ })
          MAJOR=$(echo ${VERSION_PARTS[0]} | sed 's/v//')
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.version.outputs.NEW_VERSION }}
          git push origin ${{ steps.version.outputs.NEW_VERSION }}

      - name: Build binaries
        run: |
          export CGO_ENABLED=0
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/uve-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/uve-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/uve-darwin-arm64
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/uve-windows-amd64.exe

      - name: Package release assets
        run: |
          tar czf dist/uve-linux-amd64.tar.gz -C dist uve-linux-amd64
          tar czf dist/uve-darwin-amd64.tar.gz -C dist uve-darwin-amd64
          tar czf dist/uve-darwin-arm64.tar.gz -C dist uve-darwin-arm64
          zip dist/uve-windows-amd64.zip dist/uve-windows-amd64.exe
          rm dist/uve-linux-amd64 dist/uve-darwin-amd64 dist/uve-darwin-arm64 dist/uve-windows-amd64.exe

      - name: Copy install script
        run: |
          cp uve-install.sh dist/uve-install.sh
          chmod +x dist/uve-install.sh

      - name: Upload dist as artifact for validation jobs
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  create-release:
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.NEW_VERSION }}
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/uve-install.sh
          generate_release_notes: true
