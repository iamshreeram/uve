name: Release

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

permissions:
  contents: write

env:
  TEST_SHELL: bash  # Change to 'zsh' or another shell if you want

jobs:
  build-and-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Add ~/.local/bin to PATH for this job
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install test shell if needed
        if: env.TEST_SHELL == 'zsh'
        run: sudo apt-get update && sudo apt-get install -y zsh

      - name: Build binaries
        run: |
          set -eux
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o uve-linux-amd64 main.go
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o uve-darwin-amd64 main.go
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o uve-darwin-arm64 main.go
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o uve-windows-amd64.exe main.go

      - name: Package release assets
        run: |
          set -eux
          mkdir -p dist
          tar -czf dist/uve-linux-amd64.tar.gz uve-linux-amd64
          tar -czf dist/uve-macos-amd64.tar.gz uve-darwin-amd64
          tar -czf dist/uve-macos-arm64.tar.gz uve-darwin-arm64
          zip dist/uve-windows-amd64.zip uve-windows-amd64.exe

      - name: Copy install script
        run: |
          cp uve-install.sh dist/

      - name: Validate install in chosen shell
        run: |
          set -eux
          TEMP_HOME=$(mktemp -d)
          export HOME="$TEMP_HOME"
          export PATH="$HOME/.local/bin:$PATH"
          if [ "${TEST_SHELL}" = "zsh" ]; then
            zsh dist/uve-install.sh
            ~/.local/bin/uve version
          else
            bash dist/uve-install.sh
            ~/.local/bin/uve version
          fi

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION: ${{ steps.version.outputs.NEW_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Add ~/.local/bin to PATH for this job
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Determine next version
        id: version
        run: |
          set -eux
          LATEST_TAG=$(git tag --sort=-creatordate | grep '^v' | head -n1 || echo "v0.0.0")
          MAJOR=$(echo "${LATEST_TAG}" | cut -d. -f1 | tr -d v)
          MINOR=$(echo "${LATEST_TAG}" | cut -d. -f2)
          PATCH=$(echo "${LATEST_TAG}" | cut -d. -f3)
          if [ -z "${PATCH}" ]; then PATCH=0; fi
          NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH+1))"
          echo "NEW_VERSION=${NEW_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "${{ steps.version.outputs.NEW_VERSION }}"
          git push origin "${{ steps.version.outputs.NEW_VERSION }}"

      - name: Build binaries
        run: |
          set -eux
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o uve-linux-amd64 main.go
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o uve-darwin-amd64 main.go
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o uve-darwin-arm64 main.go
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o uve-windows-amd64.exe main.go

      - name: Package release assets
        run: |
          set -eux
          mkdir -p dist
          tar -czf dist/uve-linux-amd64.tar.gz uve-linux-amd64
          tar -czf dist/uve-macos-amd64.tar.gz uve-darwin-amd64
          tar -czf dist/uve-macos-arm64.tar.gz uve-darwin-arm64
          zip dist/uve-windows-amd64.zip uve-windows-amd64.exe

      - name: Copy install script
        run: |
          cp uve-install.sh dist/

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  create-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.NEW_VERSION }}
          name: ${{ needs.release.outputs.NEW_VERSION }}
          generate_release_notes: true
          files: |
            dist/uve-linux-amd64.tar.gz
            dist/uve-macos-amd64.tar.gz
            dist/uve-macos-arm64.tar.gz
            dist/uve-windows-amd64.zip
            dist/uve-install.sh
